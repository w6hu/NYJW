
Allocating common symbols
Common symbol       size              file

p                   0xcc              main_rtx.o
mailboxStart        0x18              messaging.o
blocked_queue       0x18              rtx.o
old_stack           0x4               /tmp/ccLMkvxK.o
ready_queue         0x14              rtx.o
mailboxEnd          0x18              messaging.o
free_blocks         0x4               rtx.o
main_stack          0x1000            /tmp/ccLMkvxK.o
mem_end             0x4               rtx.o
null_p              0x22              main_rtx.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccLMkvxK.o
LOAD /tmp/ccUwUHil.o
LOAD rtx.o
LOAD dbug.o
LOAD memory.o
LOAD process.o
LOAD init.o
LOAD messaging.o
LOAD main_rtx.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000     0x12bc
 *(.text)
 .text          0x10100000       0x1e /tmp/ccLMkvxK.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020       0x44 /tmp/ccUwUHil.o
                0x10100020                asm_trap_entry
 .text          0x10100064       0xf4 rtx.o
                0x10100136                get_process_priority
                0x101000ac                request_memory_block
                0x1010011e                set_process_priority
                0x10100064                send_message
                0x101000c8                release_memory_block
                0x1010008a                receive_message
                0x10100106                delayed_send
                0x101000ea                release_processor
 .text          0x10100158       0x5c dbug.o
                0x10100178                rtx_dbug_outs
                0x10100158                rtx_dbug_out_char
 .text          0x101001b4      0x22a memory.o
                0x1010030c                initBlock
                0x101001b4                s_request_memory_block_yishi
                0x1010021a                s_release_memory_block_yishi
 *fill*         0x101003de        0x2 00
 .text          0x101003e0      0x47c process.o
                0x101007aa                is_waiting_for
                0x101004d4                release_processor_kuma_san
                0x10100810                set_process_state
                0x101003f8                init_null_process
                0x1010066c                stack_pointer_switcher
                0x101006d8                get_process_number_from_ID
                0x101003e0                null_process
                0x10100764                process_exists
                0x10100734                get_process_priority_usagi_san
                0x1010067e                get_process_from_ID
                0x10100546                schedule_next_process
                0x101004a6                c_trap_handler
                0x10100722                get_process_ID
                0x10100836                set_process_to_run
 .text          0x1010085c      0x298 init.o
                0x101008f0                put_to_blocked
                0x1010085c                put_to_ready
                0x10100a30                remove_from_blocked
                0x101009a0                remove_from_ready
 .text          0x10100af4      0x2ae messaging.o
                0x10100af4                init_mailboxes
                0x10100b2e                send_message_jessie
                0x10100c84                receive_message_jessie
 *fill*         0x10100da2        0x2 00
 .text          0x10100da4      0x2a0 main_rtx.o
                0x10100da4                __main
                0x10100dae                main
                0x10101044                . = ALIGN (0x4)
                0x10101044                __CTOR_LIST__ = .
                0x10101044        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x10101048        0x4 LONG 0x0
                0x1010104c                __CTOR_END__ = .
                0x1010104c                __DTOR_LIST__ = .
                0x1010104c        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x10101050        0x4 LONG 0x0
                0x10101054                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x10101054       0xd0 rtx.o
 .rodata        0x10101124        0x4 memory.o
                0x10101125                FREE
                0x10101127                FAILURE
                0x10101126                SUCCESS
                0x10101124                USED
 .rodata        0x10101128      0x130 process.o
 .rodata        0x10101258       0x17 messaging.o
 .rodata        0x1010126f       0x3d main_rtx.o
 *(.gcc_except_table)
                0x101012ac                __INIT_SECTION__ = .
                0x101012ac        0x4 LONG 0x4e560000
 *(.init)
                0x101012b0        0x2 SHORT 0x4e5e
                0x101012b2        0x2 SHORT 0x4e75
                0x101012b4                __FINI_SECTION__ = .
                0x101012b4        0x4 LONG 0x4e560000
 *(.fini)
                0x101012b8        0x2 SHORT 0x4e5e
                0x101012ba        0x2 SHORT 0x4e75
                0x101012bc                _etext = .
 *(.lit)

.data           0x101012bc        0x0
 *(.shdata)
 *(.data)
 .data          0x101012bc        0x0 /tmp/ccLMkvxK.o
 .data          0x101012bc        0x0 /tmp/ccUwUHil.o
 .data          0x101012bc        0x0 rtx.o
 .data          0x101012bc        0x0 dbug.o
 .data          0x101012bc        0x0 memory.o
 .data          0x101012bc        0x0 process.o
 .data          0x101012bc        0x0 init.o
 .data          0x101012bc        0x0 messaging.o
 .data          0x101012bc        0x0 main_rtx.o
                0x101012bc                _edata = .

.bss            0x101012bc     0x1176
                0x101012bc                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x101012bc        0x0 /tmp/ccLMkvxK.o
 .bss           0x101012bc        0x0 /tmp/ccUwUHil.o
 .bss           0x101012bc        0x0 rtx.o
 .bss           0x101012bc        0x0 dbug.o
 .bss           0x101012bc        0x0 memory.o
 .bss           0x101012bc        0x8 process.o
                0x101012bc                current_running_process
                0x101012c0                imma_epeen_process
 .bss           0x101012c4        0x4 init.o
                0x101012c4                used_blocks
 .bss           0x101012c8        0x0 messaging.o
 .bss           0x101012c8        0x0 main_rtx.o
 *(COMMON)
 *fill*         0x101012c8        0x8 00
 COMMON         0x101012d0     0x1010 /tmp/ccLMkvxK.o
                0x101012d0                old_stack
                0x101012e0                main_stack
 COMMON         0x101022e0       0x34 rtx.o
                0x101022e0                blocked_queue
                0x101022f8                ready_queue
                0x1010230c                free_blocks
                0x10102310                mem_end
 COMMON         0x10102314       0x30 messaging.o
                0x10102314                mailboxStart
                0x1010232c                mailboxEnd
 COMMON         0x10102344       0xee main_rtx.o
                0x10102344                p
                0x10102410                null_p
                0x10102438                _end = ALIGN (0x8)
                0x10102438                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(rtx.bin elf32-m68k)

.comment        0x00000000      0x111
 .comment       0x00000000       0x27 rtx.o
 .comment       0x00000027       0x27 dbug.o
 .comment       0x0000004e       0x27 memory.o
 .comment       0x00000075       0x27 process.o
 .comment       0x0000009c       0x27 init.o
 .comment       0x000000c3       0x27 messaging.o
 .comment       0x000000ea       0x27 main_rtx.o
