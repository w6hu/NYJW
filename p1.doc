/*
PART b
this timer program uses timer interrupt to update the time value every seconds,
and then outputs the updated value through the serial port using the serial interrupt.
*/

SINT42 Counter  = 0;
String timeString;
int time;

VOID c_timer_hander(VOID){
	Counter++;
	//then acknowledge timer interrupt.
	TIMER_TER = 2;
}

VOID c_serial_handler(VOID){
	temp = SERIAL1_USR;
			
	else if (port is ready)
		SERIAL1_WD = CharOut;
		SERIAL1_IMR = 2; //disable Interrupt.
}
SINT32 coldfire_vbr_init(VOID)
{
	// move the VBR into real memory through assembly instructions
}

void convert(int time){
	//converts integer time into string of format
	// hh:mm:ss, save it in global timeString
}

void print(){
	for (i = 0; i < 8; i++)
		CharOut = timeString[i];
		SERIAL1_IMR = 3;// enables interrupts;
}

int main(void){
	//disable all interrupts;
	
	coldfire_vbr_init();
	
	//store the timer ISR at auto-vector #6.
	// store the serial ISR at user vector #64
	//more initialization works.
	// set interrupt mask (timer and serial enabled).
	
	Counter  = 0;
	time = 0;
	while (1){
		if (counter reached 1 second)
			time ++;
			convert(time);
			print();
			Counter  = 0;
	}
	return 0;
}

/*
PART c
this memory allocation program directly writes block-related information 
to the 12bytes prior to the address of user-accessible block. 
the information includes: address of previous block, address of next block
 and status of the current block.
*/

Set up: First initialize the memory in the very beginning 
Partition the user-accessible memory into 32 FREE blocks that are linked as a doubly-linked list.
void *initBlock:
	// set __end as the starting point of the memory blocks)
	temp_end ← __end
	// initialize this first block
	temp_end.previous ← null
	temp_end.status ← FREE
	for i ← 1 to num_blocks
		// create one new block of size BLOCK_SIZE, set its status to free, previous to temp_block, and append this block to address of __end;
		next_block ← temp_end + BLOCK_SIZE
		temp_end.next ← next_block
		next_block.prev ← temp_end
		next_block.status ← FREE
		temp_end ← next_block
	//set the next of the newest block to NULL;
	temp_end.next ← null
	return &__end;	

Write info to the 12 bytes prior to the requested block address and the return the address of the end of the 12 info bytes
void* s_request_memory_block:
	if (no more free blocks)
		return NULL;
	allocated_block ← free_blocks;
	free_block ← allocated_block.next 
	free_block.prev ← NULL;
	return allocated_block+3;

Release the given block and return whether the operation is successful or not
int s_release_memory_block(void* memory_block):
	if (memory_block is valid starting block address)
		if (memory_block.status != USED)
			return FAILURE;
		if (memory_block.hasNext())
			memory_block.next().previous ← memory_block.previous;
		if (memory_block.hasPrevious())
			memory_block.previous().next ← memory_block.next;
		if (free_blocks != NULL)
			free_blocks.next = memory_block;
			
		memory_block.next ← free_blocks
		memory_block.prev ← null
		memory_block.status ← FREE
		free_blocks ← memory_block
		return SUCCESS
	else 
		return FAILURE


