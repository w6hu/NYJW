
Allocating common symbols
Common symbol       size              file

p                   0xcc              main_rtx.o
mailboxStart        0x18              messaging.o
blocked_queue       0x18              rtx.o
old_stack           0x4               /tmp/cc283Fcv.o
ready_queue         0x14              rtx.o
mailboxEnd          0x18              messaging.o
free_blocks         0x4               rtx.o
main_stack          0x1000            /tmp/cc283Fcv.o
mem_end             0x4               rtx.o
null_p              0x22              main_rtx.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/cc283Fcv.o
LOAD /tmp/ccsZUK2P.o
LOAD rtx.o
LOAD dbug.o
LOAD memory.o
LOAD process.o
LOAD init.o
LOAD messaging.o
LOAD main_rtx.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000     0x1b0a
 *(.text)
 .text          0x10100000       0x1e /tmp/cc283Fcv.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020       0x44 /tmp/ccsZUK2P.o
                0x10100020                asm_trap_entry
 .text          0x10100064       0xdc rtx.o
                0x1010011e                get_process_priority
                0x10100094                request_memory_block
                0x10100106                set_process_priority
                0x10100064                send_message
                0x101000b0                release_memory_block
                0x1010007c                receive_message
                0x101000ee                delayed_send
                0x101000d2                release_processor
 .text          0x10100140       0x5c dbug.o
                0x10100160                rtx_dbug_outs
                0x10100140                rtx_dbug_out_char
 .text          0x1010019c      0x270 memory.o
                0x10100302                initBlock
                0x1010019c                s_request_memory_block_yishi
                0x10100202                s_release_memory_block_yishi
 .text          0x1010040c      0x3f0 process.o
                0x1010074a                is_waiting_for
                0x101004d0                release_processor_kuma_san
                0x101007b0                set_process_state
                0x10100424                init_null_process
                0x101005ee                stack_pointer_switcher
                0x1010040c                null_process
                0x10100704                process_exists
                0x101006d4                get_process_priority_usagi_san
                0x10100668                get_process_from_ID
                0x1010050c                schedule_next_process
                0x10100600                c_trap_handler
                0x101006c2                get_process_ID
                0x101007d6                set_process_to_run
 .text          0x101007fc      0x4ae init.o
                0x10100aae                push_down_first_night
                0x101008ba                put_to_blocked
                0x10100b0a                push_test
                0x101007fc                put_to_ready
                0x10100a62                pop
                0x101009d8                remove_from_blocked
                0x10100af8                pop_test
                0x10100998                remove_from_ready
                0x10100a8a                push
 *fill*         0x10100caa        0x2 00
 .text          0x10100cac      0x4d6 messaging.o
                0x10100cac                init_mailboxes
                0x10100ce6                send_message_jessie
                0x10100ed4                receive_message_jessie
 *fill*         0x10101182        0x2 00
 .text          0x10101184      0x350 main_rtx.o
                0x10101184                __main
                0x1010118e                main
                0x101014d4                . = ALIGN (0x4)
                0x101014d4                __CTOR_LIST__ = .
                0x101014d4        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x101014d8        0x4 LONG 0x0
                0x101014dc                __CTOR_END__ = .
                0x101014dc                __DTOR_LIST__ = .
                0x101014dc        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x101014e0        0x4 LONG 0x0
                0x101014e4                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x101014e4       0xd0 rtx.o
 .rodata        0x101015b4       0x7c memory.o
                0x101015b5                FREE
                0x101015b7                FAILURE
                0x101015b6                SUCCESS
                0x101015b4                USED
 .rodata        0x10101630      0x138 process.o
 .rodata        0x10101768      0x1aa init.o
 .rodata        0x10101912       0xd5 messaging.o
 .rodata        0x101019e7      0x113 main_rtx.o
 *(.gcc_except_table)
                0x10101afa                __INIT_SECTION__ = .
                0x10101afa        0x4 LONG 0x4e560000
 *(.init)
                0x10101afe        0x2 SHORT 0x4e5e
                0x10101b00        0x2 SHORT 0x4e75
                0x10101b02                __FINI_SECTION__ = .
                0x10101b02        0x4 LONG 0x4e560000
 *(.fini)
                0x10101b06        0x2 SHORT 0x4e5e
                0x10101b08        0x2 SHORT 0x4e75
                0x10101b0a                _etext = .
 *(.lit)

.data           0x10101b0c        0x0
 *(.shdata)
 *(.data)
 .data          0x10101b0c        0x0 /tmp/cc283Fcv.o
 .data          0x10101b0c        0x0 /tmp/ccsZUK2P.o
 .data          0x10101b0c        0x0 rtx.o
 .data          0x10101b0c        0x0 dbug.o
 .data          0x10101b0c        0x0 memory.o
 .data          0x10101b0c        0x0 process.o
 .data          0x10101b0c        0x0 init.o
 .data          0x10101b0c        0x0 messaging.o
 .data          0x10101b0c        0x0 main_rtx.o
                0x10101b0c                _edata = .

.bss            0x10101b0c     0x1176
                0x10101b0c                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x10101b0c        0x0 /tmp/cc283Fcv.o
 .bss           0x10101b0c        0x0 /tmp/ccsZUK2P.o
 .bss           0x10101b0c        0x0 rtx.o
 .bss           0x10101b0c        0x0 dbug.o
 .bss           0x10101b0c        0x0 memory.o
 .bss           0x10101b0c        0xc process.o
                0x10101b0c                current_running_process
                0x10101b10                prev_running_process
                0x10101b14                imma_epeen_process
 .bss           0x10101b18        0x4 init.o
                0x10101b18                used_blocks
 .bss           0x10101b1c        0x0 messaging.o
 .bss           0x10101b1c        0x0 main_rtx.o
 *(COMMON)
 *fill*         0x10101b1c        0x4 00
 COMMON         0x10101b20     0x1010 /tmp/cc283Fcv.o
                0x10101b20                old_stack
                0x10101b30                main_stack
 COMMON         0x10102b30       0x34 rtx.o
                0x10102b30                blocked_queue
                0x10102b48                ready_queue
                0x10102b5c                free_blocks
                0x10102b60                mem_end
 COMMON         0x10102b64       0x30 messaging.o
                0x10102b64                mailboxStart
                0x10102b7c                mailboxEnd
 COMMON         0x10102b94       0xee main_rtx.o
                0x10102b94                p
                0x10102c60                null_p
                0x10102c88                _end = ALIGN (0x8)
                0x10102c88                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(rtx.bin elf32-m68k)

.comment        0x00000000      0x111
 .comment       0x00000000       0x27 rtx.o
 .comment       0x00000027       0x27 dbug.o
 .comment       0x0000004e       0x27 memory.o
 .comment       0x00000075       0x27 process.o
 .comment       0x0000009c       0x27 init.o
 .comment       0x000000c3       0x27 messaging.o
 .comment       0x000000ea       0x27 main_rtx.o
