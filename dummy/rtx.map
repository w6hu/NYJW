
Allocating common symbols
Common symbol       size              file

p                   0xcc              main_rtx.o
blocked_queue       0x18              process.o
old_stack           0x4               /tmp/ccpd0FhM.o
ready_queue         0x14              process.o
free_blocks         0x4               process.o
main_stack          0x1000            /tmp/ccpd0FhM.o
mem_end             0x4               memory.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccpd0FhM.o
LOAD process.o
LOAD init.o
LOAD memory.o
LOAD dbug.o
LOAD rtx.o
LOAD main_rtx.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000     0x12b6
 *(.text)
 .text          0x10100000       0x1e /tmp/ccpd0FhM.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020      0x63a process.o
                0x10100020                release_processor_kuma_san
                0x10100350                schedule_next_process
 *fill*         0x1010065a        0x2 00
 .text          0x1010065c      0x218 init.o
                0x10100716                put_to_blocked
                0x1010065c                put_to_ready
                0x10100824                pop
                0x101007d4                remove_from_blocked
                0x10100794                remove_from_ready
                0x1010084e                push
 .text          0x10100874      0x270 memory.o
                0x101008da                s_release_memory_block
                0x10100874                s_request_memory_block
                0x101009da                initBlock
 .text          0x10100ae4       0x5c dbug.o
                0x10100b04                rtx_dbug_outs
                0x10100ae4                rtx_dbug_out_char
 .text          0x10100b40       0xc2 rtx.o
                0x10100bea                get_process_priority
                0x10100b6e                request_memory_block
                0x10100bd2                set_process_priority
                0x10100b40                send_message
                0x10100b86                release_memory_block
                0x10100b58                receive_message
                0x10100bba                delayed_send
                0x10100b9e                release_processor
 *fill*         0x10100c02        0x2 00
 .text          0x10100c04      0x282 main_rtx.o
                0x10100c04                __main
                0x10100c0e                main
                0x10100e88                . = ALIGN (0x4)
 *fill*         0x10100e86        0x2 00
                0x10100e88                __CTOR_LIST__ = .
                0x10100e88        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x10100e8c        0x4 LONG 0x0
                0x10100e90                __CTOR_END__ = .
                0x10100e90                __DTOR_LIST__ = .
                0x10100e90        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x10100e94        0x4 LONG 0x0
                0x10100e98                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x10100e98      0x195 process.o
 .rodata        0x1010102d       0x50 init.o
 .rodata        0x1010107d       0x7c memory.o
                0x1010107e                FREE
                0x10101080                FAILURE
                0x1010107f                SUCCESS
                0x1010107d                USED
 .rodata        0x101010f9       0xd0 rtx.o
 .rodata        0x101011c9       0xdd main_rtx.o
 *(.gcc_except_table)
                0x101012a6                __INIT_SECTION__ = .
                0x101012a6        0x4 LONG 0x4e560000
 *(.init)
                0x101012aa        0x2 SHORT 0x4e5e
                0x101012ac        0x2 SHORT 0x4e75
                0x101012ae                __FINI_SECTION__ = .
                0x101012ae        0x4 LONG 0x4e560000
 *(.fini)
                0x101012b2        0x2 SHORT 0x4e5e
                0x101012b4        0x2 SHORT 0x4e75
                0x101012b6                _etext = .
 *(.lit)

.data           0x101012b8        0x0
 *(.shdata)
 *(.data)
 .data          0x101012b8        0x0 /tmp/ccpd0FhM.o
 .data          0x101012b8        0x0 process.o
 .data          0x101012b8        0x0 init.o
 .data          0x101012b8        0x0 memory.o
 .data          0x101012b8        0x0 dbug.o
 .data          0x101012b8        0x0 rtx.o
 .data          0x101012b8        0x0 main_rtx.o
                0x101012b8                _edata = .

.bss            0x101012b8     0x1118
                0x101012b8                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x101012b8        0x0 /tmp/ccpd0FhM.o
 .bss           0x101012b8        0x4 process.o
                0x101012b8                current_running_process
 .bss           0x101012bc        0x4 init.o
                0x101012bc                used_blocks
 .bss           0x101012c0        0x0 memory.o
 .bss           0x101012c0        0x0 dbug.o
 .bss           0x101012c0        0x0 rtx.o
 .bss           0x101012c0        0x0 main_rtx.o
 *(COMMON)
 COMMON         0x101012c0     0x1010 /tmp/ccpd0FhM.o
                0x101012c0                old_stack
                0x101012d0                main_stack
 COMMON         0x101022d0       0x30 process.o
                0x101022d0                blocked_queue
                0x101022e8                ready_queue
                0x101022fc                free_blocks
 COMMON         0x10102300        0x4 memory.o
                0x10102300                mem_end
 COMMON         0x10102304       0xcc main_rtx.o
                0x10102304                p
                0x101023d0                _end = ALIGN (0x8)
                0x101023d0                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(rtx.bin elf32-m68k)

.comment        0x00000000       0xea
 .comment       0x00000000       0x27 process.o
 .comment       0x00000027       0x27 init.o
 .comment       0x0000004e       0x27 memory.o
 .comment       0x00000075       0x27 dbug.o
 .comment       0x0000009c       0x27 rtx.o
 .comment       0x000000c3       0x27 main_rtx.o
