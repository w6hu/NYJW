
Allocating common symbols
Common symbol       size              file

p                   0xcc              main_rtx.o
blocked_queue       0x18              process.o
old_stack           0x4               /tmp/ccMWUsuT.o
ready_queue         0x14              process.o
free_blocks         0x4               process.o
main_stack          0x1000            /tmp/ccMWUsuT.o
mem_end             0x4               memory.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccMWUsuT.o
LOAD process.o
LOAD init.o
LOAD memory.o
LOAD dbug.o
LOAD rtx.o
LOAD main_rtx.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000     0x13df
 *(.text)
 .text          0x10100000       0x1e /tmp/ccMWUsuT.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020      0x69c process.o
                0x10100020                release_processor_kuma_san
                0x10100676                process_exists
                0x10100342                schedule_next_process
                0x10100664                get_process_ID
 .text          0x101006bc      0x218 init.o
                0x10100776                put_to_blocked
                0x101006bc                put_to_ready
                0x10100884                pop
                0x10100834                remove_from_blocked
                0x101007f4                remove_from_ready
                0x101008ae                push
 .text          0x101008d4      0x270 memory.o
                0x1010093a                s_release_memory_block
                0x101008d4                s_request_memory_block
                0x10100a3a                initBlock
 .text          0x10100b44       0x5c dbug.o
                0x10100b64                rtx_dbug_outs
                0x10100b44                rtx_dbug_out_char
 .text          0x10100ba0       0xc2 rtx.o
                0x10100c4a                get_process_priority
                0x10100bce                request_memory_block
                0x10100c32                set_process_priority
                0x10100ba0                send_message
                0x10100be6                release_memory_block
                0x10100bb8                receive_message
                0x10100c1a                delayed_send
                0x10100bfe                release_processor
 *fill*         0x10100c62        0x2 00
 .text          0x10100c64      0x282 main_rtx.o
                0x10100c64                __main
                0x10100c6e                main
                0x10100ee8                . = ALIGN (0x4)
 *fill*         0x10100ee6        0x2 00
                0x10100ee8                __CTOR_LIST__ = .
                0x10100ee8        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x10100eec        0x4 LONG 0x0
                0x10100ef0                __CTOR_END__ = .
                0x10100ef0                __DTOR_LIST__ = .
                0x10100ef0        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x10100ef4        0x4 LONG 0x0
                0x10100ef8                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x10100ef8      0x25e process.o
 .rodata        0x10101156       0x50 init.o
 .rodata        0x101011a6       0x7c memory.o
                0x101011a7                FREE
                0x101011a9                FAILURE
                0x101011a8                SUCCESS
                0x101011a6                USED
 .rodata        0x10101222       0xd0 rtx.o
 .rodata        0x101012f2       0xdd main_rtx.o
 *(.gcc_except_table)
                0x101013cf                __INIT_SECTION__ = .
                0x101013cf        0x4 LONG 0x4e560000
 *(.init)
                0x101013d3        0x2 SHORT 0x4e5e
                0x101013d5        0x2 SHORT 0x4e75
                0x101013d7                __FINI_SECTION__ = .
                0x101013d7        0x4 LONG 0x4e560000
 *(.fini)
                0x101013db        0x2 SHORT 0x4e5e
                0x101013dd        0x2 SHORT 0x4e75
                0x101013df                _etext = .
 *(.lit)

.data           0x101013e0        0x0
 *(.shdata)
 *(.data)
 .data          0x101013e0        0x0 /tmp/ccMWUsuT.o
 .data          0x101013e0        0x0 process.o
 .data          0x101013e0        0x0 init.o
 .data          0x101013e0        0x0 memory.o
 .data          0x101013e0        0x0 dbug.o
 .data          0x101013e0        0x0 rtx.o
 .data          0x101013e0        0x0 main_rtx.o
                0x101013e0                _edata = .

.bss            0x101013e0     0x1120
                0x101013e0                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x101013e0        0x0 /tmp/ccMWUsuT.o
 .bss           0x101013e0        0x4 process.o
                0x101013e0                current_running_process
 .bss           0x101013e4        0x4 init.o
                0x101013e4                used_blocks
 .bss           0x101013e8        0x0 memory.o
 .bss           0x101013e8        0x0 dbug.o
 .bss           0x101013e8        0x0 rtx.o
 .bss           0x101013e8        0x0 main_rtx.o
 *(COMMON)
 *fill*         0x101013e8        0x8 00
 COMMON         0x101013f0     0x1010 /tmp/ccMWUsuT.o
                0x101013f0                old_stack
                0x10101400                main_stack
 COMMON         0x10102400       0x30 process.o
                0x10102400                blocked_queue
                0x10102418                ready_queue
                0x1010242c                free_blocks
 COMMON         0x10102430        0x4 memory.o
                0x10102430                mem_end
 COMMON         0x10102434       0xcc main_rtx.o
                0x10102434                p
                0x10102500                _end = ALIGN (0x8)
                0x10102500                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(rtx.bin elf32-m68k)

.comment        0x00000000       0xea
 .comment       0x00000000       0x27 process.o
 .comment       0x00000027       0x27 init.o
 .comment       0x0000004e       0x27 memory.o
 .comment       0x00000075       0x27 dbug.o
 .comment       0x0000009c       0x27 rtx.o
 .comment       0x000000c3       0x27 main_rtx.o
