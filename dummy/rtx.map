
Allocating common symbols
Common symbol       size              file

p                   0xb4              init.o
blocked_queue       0x18              init.o
old_stack           0x4               /tmp/ccY9WfIk.o
ready_queue         0x14              init.o
free_blocks         0x4               dbug.o
main_stack          0x1000            /tmp/ccY9WfIk.o
mem_end             0x4               memory.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccY9WfIk.o
LOAD dbug.o
LOAD memory.o
LOAD init.o
LOAD rtx.o
LOAD main_rtx.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000      0x8cc
 *(.text)
 .text          0x10100000       0x1e /tmp/ccY9WfIk.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020       0x5c dbug.o
                0x10100040                rtx_dbug_outs
                0x10100020                rtx_dbug_out_char
 .text          0x1010007c      0x264 memory.o
                0x101000e2                s_release_memory_block
                0x1010007c                s_request_memory_block
                0x101001e2                initBlock
 .text          0x101002e0      0x21e init.o
                0x1010036a                put_to_blocked
                0x101004c8                init
                0x101002e0                put_to_ready
                0x10100478                pop
                0x10100428                remove_from_blocked
                0x101003e8                remove_from_ready
                0x101004a2                push
 *fill*         0x101004fe        0x2 00
 .text          0x10100500       0xcc rtx.o
                0x101005b4                get_process_priority
                0x1010052e                request_memory_block
                0x1010059c                set_process_priority
                0x10100500                send_message
                0x1010054a                release_memory_block
                0x10100518                receive_message
                0x10100584                delayed_send
                0x1010056c                release_processor
 .text          0x101005cc       0xd0 main_rtx.o
                0x101005cc                __main
                0x101005d6                main
                0x1010069c                . = ALIGN (0x4)
                0x1010069c                __CTOR_LIST__ = .
                0x1010069c        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x101006a0        0x4 LONG 0x0
                0x101006a4                __CTOR_END__ = .
                0x101006a4                __DTOR_LIST__ = .
                0x101006a4        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x101006a8        0x4 LONG 0x0
                0x101006ac                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x101006ac       0x67 memory.o
                0x101006ad                FREE
                0x101006af                FAILURE
                0x101006ae                SUCCESS
                0x101006ac                USED
 .rodata        0x10100713       0x59 init.o
 .rodata        0x1010076c       0xd0 rtx.o
 .rodata        0x1010083c       0x80 main_rtx.o
 *(.gcc_except_table)
                0x101008bc                __INIT_SECTION__ = .
                0x101008bc        0x4 LONG 0x4e560000
 *(.init)
                0x101008c0        0x2 SHORT 0x4e5e
                0x101008c2        0x2 SHORT 0x4e75
                0x101008c4                __FINI_SECTION__ = .
                0x101008c4        0x4 LONG 0x4e560000
 *(.fini)
                0x101008c8        0x2 SHORT 0x4e5e
                0x101008ca        0x2 SHORT 0x4e75
                0x101008cc                _etext = .
 *(.lit)

.data           0x101008cc        0x0
 *(.shdata)
 *(.data)
 .data          0x101008cc        0x0 /tmp/ccY9WfIk.o
 .data          0x101008cc        0x0 dbug.o
 .data          0x101008cc        0x0 memory.o
 .data          0x101008cc        0x0 init.o
 .data          0x101008cc        0x0 rtx.o
 .data          0x101008cc        0x0 main_rtx.o
                0x101008cc                _edata = .

.bss            0x101008cc     0x10fc
                0x101008cc                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x101008cc        0x0 /tmp/ccY9WfIk.o
 .bss           0x101008cc        0x0 dbug.o
 .bss           0x101008cc        0x0 memory.o
 .bss           0x101008cc        0x4 init.o
                0x101008cc                used_blocks
 .bss           0x101008d0        0x0 rtx.o
 .bss           0x101008d0        0x0 main_rtx.o
 *(COMMON)
 COMMON         0x101008d0     0x1010 /tmp/ccY9WfIk.o
                0x101008d0                old_stack
                0x101008e0                main_stack
 COMMON         0x101018e0        0x4 dbug.o
                0x101018e0                free_blocks
 COMMON         0x101018e4        0x4 memory.o
                0x101018e4                mem_end
 COMMON         0x101018e8       0xe0 init.o
                0x101018e8                p
                0x1010199c                blocked_queue
                0x101019b4                ready_queue
                0x101019c8                _end = ALIGN (0x8)
                0x101019c8                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(rtx.bin elf32-m68k)

.comment        0x00000000       0xc3
 .comment       0x00000000       0x27 dbug.o
 .comment       0x00000027       0x27 memory.o
 .comment       0x0000004e       0x27 init.o
 .comment       0x00000075       0x27 rtx.o
 .comment       0x0000009c       0x27 main_rtx.o
