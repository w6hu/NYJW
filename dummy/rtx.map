
Allocating common symbols
Common symbol       size              file

p                   0xe0              main_rtx.o
mailboxStart        0x24              messaging.o
blocked_queue       0x8               main_rtx.o
old_stack           0x4               /tmp/ccQJqzvY.o
ready_queue         0x14              main_rtx.o
mailboxEnd          0x24              messaging.o
free_blocks         0x4               process.o
main_stack          0x1000            /tmp/ccQJqzvY.o
mem_end             0x4               memory.o
charOut             0x1               iprocess.o
null_p              0x1c              main_rtx.o
charIn              0x1               iprocess.o
keyboard_i_proc     0x1c              main_rtx.o

Memory Configuration

Name             Origin             Length             Attributes
ram              0x10100000         0x00100000
*default*        0x00000000         0xffffffff

Linker script and memory map

LOAD /tmp/ccQJqzvY.o
LOAD /tmp/ccqoHmKM.o
LOAD /tmp/ccsxANDD.o
LOAD process.o
LOAD init.o
LOAD memory.o
LOAD dbug.o
LOAD kcd.o
LOAD crt.o
LOAD messaging.o
LOAD rtx.o
LOAD main_rtx.o
LOAD iprocess.o
START GROUP
LOAD /opt/gcc-coldfire/bin/../lib/gcc/m68k-elf/4.3.2/m5307/libgcc.a
END GROUP
                0x00000000                __DYNAMIC = 0x0
                0x00000000                PROVIDE (hardware_init_hook, 0x0)
                0x00000000                PROVIDE (_hardware_init_hook, 0x0)
                0x00000000                PROVIDE (software_init_hook, 0x0)
                0x00000000                PROVIDE (_software_init_hook, 0x0)

.text           0x10100000     0x1bea
 *(.text)
 .text          0x10100000       0x1e /tmp/ccQJqzvY.o
 *fill*         0x1010001e        0x2 00
 .text          0x10100020       0x44 /tmp/ccqoHmKM.o
                0x10100020                asm_trap_entry
 .text          0x10100064       0x44 /tmp/ccsxANDD.o
                0x10100064                asm_serial_entry
 .text          0x101000a8      0x5e0 process.o
                0x1010061a                is_waiting_for
                0x10100164                release_processor_kuma_san
                0x10100662                set_process_state
                0x101000b2                init_null_process
                0x101002ba                trap_call_animal
                0x10100256                stack_pointer_switcher
                0x101004ae                get_process_number_from_ID
                0x101000a8                null_process
                0x101005c4                process_exists
                0x1010054a                set_process_priority_yama_san
                0x1010051a                get_process_priority_usagi_san
                0x10100452                get_process_from_ID
                0x10100192                schedule_next_process
                0x10100508                get_process_ID
                0x101001a6                schedule_next_process_neko_san
 .text          0x10100688      0x2d6 init.o
                0x1010071c                put_to_blocked
                0x101008f2                remove_first_from_blocked
                0x10100688                put_to_ready
                0x10100846                remove_from_blocked
                0x101007ae                remove_from_ready
 *fill*         0x1010095e        0x2 00
 .text          0x10100960      0x252 memory.o
                0x10100ae0                initBlock
                0x10100960                s_request_memory_block_yishi
                0x101009e2                s_release_memory_block_yishi
 *fill*         0x10100bb2        0x2 00
 .text          0x10100bb4       0xfa dbug.o
                0x10100bd4                rtx_dbug_outs
                0x10100bb4                rtx_dbug_out_char
                0x10100c10                rtx_dbug_out_num
 *fill*         0x10100cae        0x2 00
 .text          0x10100cb0      0x108 kcd.o
                0x10100cea                init_kcd
                0x10100cb0                kcd
 .text          0x10100db8      0x15e crt.o
                0x10100e4a                init_crt
                0x10100db8                crt
 *fill*         0x10100f16        0x2 00
 .text          0x10100f18      0x302 messaging.o
                0x10100f52                pre_send_message
                0x10100f18                init_mailboxes
                0x10101062                send_message_jessie
                0x101010ae                receive_message_jessie
                0x10100f74                act_send_message
                0x101011b2                delayed_send_umi_san
 *fill*         0x1010121a        0x2 00
 .text          0x1010121c      0x180 rtx.o
                0x1010136e                get_process_priority
                0x10101288                request_memory_block
                0x10101336                set_process_priority
                0x1010121c                send_message
                0x101012b0                release_memory_block
                0x10101254                receive_message
                0x101012f4                delayed_send
                0x101012de                release_processor
 .text          0x1010139c      0x3d8 main_rtx.o
                0x1010139c                __main
                0x1010169e                coldfire_vbr_init
                0x101013a6                main
                0x101016b6                init_interrupts
 .text          0x10101774      0x32e iprocess.o
                0x101019e2                init_keyboard_i_proc
                0x10101774                uart_i_process
                0x10101aa4                . = ALIGN (0x4)
 *fill*         0x10101aa2        0x2 00
                0x10101aa4                __CTOR_LIST__ = .
                0x10101aa4        0x4 LONG 0x0 (((__CTOR_END__ - __CTOR_LIST__) / 0x4) - 0x2)
 *(.ctors)
                0x10101aa8        0x4 LONG 0x0
                0x10101aac                __CTOR_END__ = .
                0x10101aac                __DTOR_LIST__ = .
                0x10101aac        0x4 LONG 0x0 (((__DTOR_END__ - __DTOR_LIST__) / 0x4) - 0x2)
 *(.dtors)
                0x10101ab0        0x4 LONG 0x0
                0x10101ab4                __DTOR_END__ = .
 *(.rodata*)
 .rodata        0x10101ab4       0x1b process.o
 .rodata        0x10101acf       0x21 memory.o
                0x10101ad0                FREE
                0x10101ad2                FAILURE
                0x10101ad1                SUCCESS
                0x10101acf                USED
 .rodata        0x10101af0        0x3 dbug.o
 .rodata        0x10101af3       0x20 kcd.o
 .rodata        0x10101b13       0x2a crt.o
 .rodata        0x10101b3d       0x54 main_rtx.o
 .rodata        0x10101b91       0x49 iprocess.o
 *(.gcc_except_table)
                0x10101bda                __INIT_SECTION__ = .
                0x10101bda        0x4 LONG 0x4e560000
 *(.init)
                0x10101bde        0x2 SHORT 0x4e5e
                0x10101be0        0x2 SHORT 0x4e75
                0x10101be2                __FINI_SECTION__ = .
                0x10101be2        0x4 LONG 0x4e560000
 *(.fini)
                0x10101be6        0x2 SHORT 0x4e5e
                0x10101be8        0x2 SHORT 0x4e75
                0x10101bea                _etext = .
 *(.lit)

.data           0x10101bec        0x0
 *(.shdata)
 *(.data)
 .data          0x10101bec        0x0 /tmp/ccQJqzvY.o
 .data          0x10101bec        0x0 /tmp/ccqoHmKM.o
 .data          0x10101bec        0x0 /tmp/ccsxANDD.o
 .data          0x10101bec        0x0 process.o
 .data          0x10101bec        0x0 init.o
 .data          0x10101bec        0x0 memory.o
 .data          0x10101bec        0x0 dbug.o
 .data          0x10101bec        0x0 kcd.o
 .data          0x10101bec        0x0 crt.o
 .data          0x10101bec        0x0 messaging.o
 .data          0x10101bec        0x0 rtx.o
 .data          0x10101bec        0x0 main_rtx.o
 .data          0x10101bec        0x0 iprocess.o
                0x10101bec                _edata = .

.bss            0x10101bec     0x11aa
                0x10101bec                __bss_start = .
 *(.shbss)
 *(.bss)
 .bss           0x10101bec        0x0 /tmp/ccQJqzvY.o
 .bss           0x10101bec        0x0 /tmp/ccqoHmKM.o
 .bss           0x10101bec        0x0 /tmp/ccsxANDD.o
 .bss           0x10101bec        0x8 process.o
                0x10101bec                current_running_process
                0x10101bf0                prev_running_process
 .bss           0x10101bf4        0x4 init.o
                0x10101bf4                used_blocks
 .bss           0x10101bf8        0x0 memory.o
 .bss           0x10101bf8        0x0 dbug.o
 .bss           0x10101bf8        0x0 kcd.o
 .bss           0x10101bf8        0x0 crt.o
 .bss           0x10101bf8        0x0 messaging.o
 .bss           0x10101bf8        0x0 rtx.o
 .bss           0x10101bf8        0x0 main_rtx.o
 .bss           0x10101bf8        0x0 iprocess.o
 *(COMMON)
 *fill*         0x10101bf8        0x8 00
 COMMON         0x10101c00     0x1010 /tmp/ccQJqzvY.o
                0x10101c00                old_stack
                0x10101c10                main_stack
 COMMON         0x10102c10        0x4 process.o
                0x10102c10                free_blocks
 COMMON         0x10102c14        0x4 memory.o
                0x10102c14                mem_end
 COMMON         0x10102c18       0x48 messaging.o
                0x10102c18                mailboxStart
                0x10102c3c                mailboxEnd
 COMMON         0x10102c60      0x134 main_rtx.o
                0x10102c60                p
                0x10102d40                blocked_queue
                0x10102d48                ready_queue
                0x10102d5c                null_p
                0x10102d78                keyboard_i_proc
 COMMON         0x10102d94        0x2 iprocess.o
                0x10102d94                charOut
                0x10102d95                charIn
                0x10102d98                _end = ALIGN (0x8)
                0x10102d98                __end = _end

.stab
 *(.stab)

.stabstr
 *(.stabstr)

__REGISTER_RTX__
                0x10300000       0x84
                0x10300000                __REGISTER_RTX_ENTRY__ = <code 345> (.)
 *(__REGISTER_RTX__)
 __REGISTER_RTX__
                0x10300000       0x84 main_rtx.o
                0x10300000                register_rtx
                0x10380000                __REGISTER_TEST_PROCS_ENTRY__ = 0x10380000
                0x10400000                __RTX_TEST_CODE_ENTRY__ = 0x10400000

__RTX_TEST_DATA__
                0x10500000       0x5c
 *(__RTX_TEST_DATA__)
 __RTX_TEST_DATA__
                0x10500000       0x5c main_rtx.o
                0x10500020                g_test_proc
                0x10500000                g_test_fixture
OUTPUT(rtx.bin elf32-m68k)

.comment        0x00000000      0x186
 .comment       0x00000000       0x27 process.o
 .comment       0x00000027       0x27 init.o
 .comment       0x0000004e       0x27 memory.o
 .comment       0x00000075       0x27 dbug.o
 .comment       0x0000009c       0x27 kcd.o
 .comment       0x000000c3       0x27 crt.o
 .comment       0x000000ea       0x27 messaging.o
 .comment       0x00000111       0x27 rtx.o
 .comment       0x00000138       0x27 main_rtx.o
 .comment       0x0000015f       0x27 iprocess.o
